# Install build dependencies for charm builds
- name: Install libpq-dev
  become: true
  apt:
     name: libpq-dev
- name: Install libmysqlclient-dev
  become: true
  apt:
    name: libmysqlclient-dev
- name: Install charmcraft snap
  when: needs_charm_build and build_type == "charmcraft"
  become: true
  snap:
    name: charmcraft
    classic: yes
- name: Purge lxd apt packages
  become: true
  apt:
    name: "{{ item }}"
    state: absent
    purge: yes
  loop:
    - lxd
    - lxd-client
- name: Install lxd snap
  become: true
  snap:
    name: lxd
    channel: 4.22/stable
- name: Initialize lxd
  command: lxd init --auto
- name: Print information about installed software
  args:
    executable: /bin/bash
  shell: |
    set -x
    echo "build_type: {{ build_type }}"
    snap list
    dpkg --get-selections
    which lxc
    which lxd

# Improvements: use the built charm tarball artifact that's sent to Zuul for
# downloading rather than just knowing the path and using that.
- name: fetch reactive charm
  when: needs_charm_build and build_type == "reactive"
  args:
    executable: /bin/bash
  shell: |
    curl -o /tmp/{{ charm_build_name }}-{{ zuul.buildset }}.tar.bz2 http://10.245.161.162:80/swift/v1/zuul-built-charms/{{ charm_build_name }}-{{ zuul.buildset }}.tar.bz2 || true
    mkdir -p {{ zuul.project.src_dir }}/build/builds/{{ charm_build_name }}
    cd {{ zuul.project.src_dir }}/build/builds/{{ charm_build_name }}
    # try to untar the downloaded file and echo our "success" message, but pass on failure
    tar xjf /tmp/{{ charm_build_name }}-{{ zuul.buildset }}.tar.bz2 && \
      echo "successfully fetched built {{ charm_build_name }}" || \
      true
  register: fetch_charm_reactive

- name: fetch charmcraft charm
  when: needs_charm_build and build_type == "charmcraft"
  args:
    executable: /bin/bash
  shell: |
    set -x
    curl -o {{ zuul.project.src_dir }}/{{ charm_build_name }}-{{ zuul.buildset }}.charm http://10.245.161.162:80/swift/v1/zuul-built-charms/{{ charm_build_name }}-{{ zuul.buildset }}.charm || true
    mv {{ zuul.project.src_dir }}/{{ charm_build_name }}-{{ zuul.buildset }}.charm {{ zuul.project.src_dir }}/{{ charm_build_name }}.charm || true
    # .charm files should be zip archives. But there seems to be a bug in zuul_swift_upload which is compressing the file
    # when it is uploaded. The result is that the stored file is a zip file which has then been gzip compressed. The
    # file extension does not change during this process resulting in gzipped file without a gz extension.
    # Once the charm has been downloaded the gzip compression needs to be undone. Once it is undone the resulting .charm
    # file will be in the correct zip format. To remove the gzip compression the next line uses gzip -t to test if the
    # .charm file has been gzip compressed. If it is gzip compressed then add the gz extension and run gunzip on the file.
    gzip -t  {{ zuul.project.src_dir }}/{{ charm_build_name }}.charm && \
      mv {{ zuul.project.src_dir }}/{{ charm_build_name }}.charm {{ zuul.project.src_dir }}/{{ charm_build_name }}.charm.gz && \
      gunzip {{ zuul.project.src_dir }}/{{ charm_build_name }}.charm.gz || true
    ls -l {{ zuul.project.src_dir }}/{{ charm_build_name }}.charm && grep -Ev 'NoSuchKey' {{ zuul.project.src_dir }}/{{ charm_build_name }}.charm && \
      echo "successfully fetched built {{ charm_build_name }}" || \
      true
  register: fetch_charm_charmcraft

# In the below conditional, we're asking to build the charm with two conditions:
# 1. The charm is a reactive charm that's been configured to build (needs_charm_build)
# 2. We did not successfully fetch a built charm in the step above.
#      The way we're checking if we fetched successfully is to look through the output of
#      the previous command for the string "successfully fetched built" and checking the
#      position of that, as -1 is the value for a not-found in this case.
- name: build charm
  when: needs_charm_build and (
          (fetch_charm_reactive.stdout is defined and fetch_charm_reactive.stdout.find("successfully fetched built") == -1) or
          (fetch_charm_charmcraft.stdout is defined and fetch_charm_charmcraft.stdout.find("successfully fetched built") == -1))
  args:
    chdir: "{{ zuul.project.src_dir }}"
    executable: /bin/bash
  environment: "{{ tox_environment|combine(tox_constraints_env|default({})) }}"
  shell: |
    sudo apt install ca-certificates
    {{ tox_executable }} -e build
  register: charm_build_output

- name: set built charm path for reactive charms
  when: needs_charm_build and build_type == "reactive"
  set_fact:
    zuul_work_dir: "{{ zuul.project.src_dir }}/build/builds/{{ charm_build_name }}"

- name: set built charm path for charmcraft charms
  when: needs_charm_build and build_type == "charmcraft"
  set_fact:
    zuul_work_dir: "{{ zuul.project.src_dir }}"
